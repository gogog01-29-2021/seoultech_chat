{"ast":null,"code":"import axios from 'axios';\nimport { API_BASE_URL } from '../utils/constants';\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// 요청 인터셉터 - JWT 토큰 자동 추가\napi.interceptors.request.use(config => {\n  // localStorage에서 토큰 가져오기\n  const token = localStorage.getItem('token');\n\n  // 토큰이 있으면 Authorization 헤더에 추가\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// 응답 인터셉터 - 401 에러 처리\napi.interceptors.response.use(response => {\n  // 성공적인 응답은 그대로 반환\n  return response;\n}, error => {\n  var _error$response;\n  // 401 Unauthorized 에러 처리\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    // 토큰이 만료되었거나 유효하지 않은 경우\n    // 로컬 스토리지에서 인증 정보 삭제\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    localStorage.removeItem('isAuthenticated');\n\n    // 로그인 페이지로 리다이렉트\n    window.location.href = '/login';\n  }\n  return Promise.reject(error);\n});\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","_error$response","status","removeItem","window","location","href"],"sources":["/Users/songtaeho/Documents/GitHub/seoultech_chat/client/src/services/api.js"],"sourcesContent":["import axios from 'axios';\nimport { API_BASE_URL } from '../utils/constants';\n\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// 요청 인터셉터 - JWT 토큰 자동 추가\napi.interceptors.request.use(\n  (config) => {\n    // localStorage에서 토큰 가져오기\n    const token = localStorage.getItem('token');\n    \n    // 토큰이 있으면 Authorization 헤더에 추가\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    \n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// 응답 인터셉터 - 401 에러 처리\napi.interceptors.response.use(\n  (response) => {\n    // 성공적인 응답은 그대로 반환\n    return response;\n  },\n  (error) => {\n    // 401 Unauthorized 에러 처리\n    if (error.response?.status === 401) {\n      // 토큰이 만료되었거나 유효하지 않은 경우\n      // 로컬 스토리지에서 인증 정보 삭제\n      localStorage.removeItem('token');\n      localStorage.removeItem('user');\n      localStorage.removeItem('isAuthenticated');\n      \n      // 로그인 페이지로 리다이렉트\n      window.location.href = '/login';\n    }\n    \n    return Promise.reject(error);\n  }\n);\n\nexport default api;"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,YAAY,QAAQ,oBAAoB;AAEjD,MAAMC,GAAG,GAAGF,KAAK,CAACG,MAAM,CAAC;EACvBC,OAAO,EAAEH,YAAY;EACrBI,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAH,GAAG,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CACzBC,MAAM,IAAK;EACV;EACA,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;;EAE3C;EACA,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACJ,OAAO,CAACQ,aAAa,GAAG,UAAUH,KAAK,EAAE;EAClD;EAEA,OAAOD,MAAM;AACf,CAAC,EACAK,KAAK,IAAK;EACT,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACAZ,GAAG,CAACI,YAAY,CAACW,QAAQ,CAACT,GAAG,CAC1BS,QAAQ,IAAK;EACZ;EACA,OAAOA,QAAQ;AACjB,CAAC,EACAH,KAAK,IAAK;EAAA,IAAAI,eAAA;EACT;EACA,IAAI,EAAAA,eAAA,GAAAJ,KAAK,CAACG,QAAQ,cAAAC,eAAA,uBAAdA,eAAA,CAAgBC,MAAM,MAAK,GAAG,EAAE;IAClC;IACA;IACAR,YAAY,CAACS,UAAU,CAAC,OAAO,CAAC;IAChCT,YAAY,CAACS,UAAU,CAAC,MAAM,CAAC;IAC/BT,YAAY,CAACS,UAAU,CAAC,iBAAiB,CAAC;;IAE1C;IACAC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,QAAQ;EACjC;EAEA,OAAOR,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,eAAeZ,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}