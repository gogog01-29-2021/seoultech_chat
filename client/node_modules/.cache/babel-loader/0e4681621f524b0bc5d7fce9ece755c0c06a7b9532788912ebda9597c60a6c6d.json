{"ast":null,"code":"import axios from 'axios';\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:3000/api',\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// 요청 인터셉터 - JWT 토큰 자동 추가\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// 응답 인터셉터 - 401 에러 처리\napi.interceptors.response.use(response => response, error => {\n  var _error$response;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    // 토큰 만료 또는 인증 실패\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    localStorage.removeItem('isAuthenticated');\n    window.location.href = '/login';\n  }\n  return Promise.reject(error);\n});\nexport const authService = {\n  async login(email, password) {\n    try {\n      const response = await api.post('/auth/login', {\n        email,\n        password\n      });\n      if (response.data.token) {\n        // JWT 토큰 저장\n        localStorage.setItem('token', response.data.token);\n        localStorage.setItem('user', JSON.stringify(response.data.user));\n        localStorage.setItem('isAuthenticated', 'true');\n      }\n      return response.data;\n    } catch (error) {\n      var _error$response2;\n      throw ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data) || {\n        error: error.message\n      };\n    }\n  },\n  // client/src/services/authService.js의 register 메서드\n  async register(userData) {\n    try {\n      const response = await api.post('/auth/register', {\n        email: userData.email,\n        username: userData.username,\n        password: userData.password\n      });\n\n      // 자동 로그인 (선택사항)\n      if (response.data.token) {\n        localStorage.setItem('token', response.data.token);\n        localStorage.setItem('user', JSON.stringify(response.data.user));\n        localStorage.setItem('isAuthenticated', 'true');\n      }\n      return response.data;\n    } catch (error) {\n      var _error$response3;\n      throw ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.data) || {\n        error: error.message\n      };\n    }\n  },\n  getCurrentUser() {\n    const userStr = localStorage.getItem('user');\n    return userStr ? JSON.parse(userStr) : null;\n  },\n  getToken() {\n    return localStorage.getItem('token');\n  },\n  isAuthenticated() {\n    const token = this.getToken();\n    if (!token) return false;\n    try {\n      // JWT 토큰의 페이로드 디코딩하여 만료 확인\n      const payload = JSON.parse(atob(token.split('.')[1]));\n      return payload.exp > Date.now() / 1000;\n    } catch {\n      return false;\n    }\n  },\n  logout() {\n    localStorage.removeItem('user');\n    localStorage.removeItem('token');\n    localStorage.removeItem('isAuthenticated');\n  },\n  // 토큰 갱신 (선택사항)\n  async refreshToken() {\n    try {\n      const response = await api.post('/auth/refresh');\n      if (response.data.token) {\n        localStorage.setItem('token', response.data.token);\n      }\n      return response.data;\n    } catch (error) {\n      this.logout();\n      throw error;\n    }\n  },\n  // 현재 사용자 정보 가져오기 (서버에서)\n  async getCurrentUserFromServer() {\n    try {\n      const response = await api.get('/auth/me');\n      return response.data.user;\n    } catch (error) {\n      var _error$response4;\n      throw ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.data) || {\n        error: error.message\n      };\n    }\n  }\n};","map":{"version":3,"names":["axios","api","create","baseURL","process","env","REACT_APP_API_URL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","_error$response","status","removeItem","window","location","href","authService","login","email","password","post","data","setItem","JSON","stringify","user","_error$response2","message","register","userData","username","_error$response3","getCurrentUser","userStr","parse","getToken","isAuthenticated","payload","atob","split","exp","Date","now","logout","refreshToken","getCurrentUserFromServer","get","_error$response4"],"sources":["/Users/songtaeho/Documents/GitHub/seoultech_chat/client/src/services/authService.js"],"sourcesContent":["import axios from 'axios';\n\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:3000/api',\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// 요청 인터셉터 - JWT 토큰 자동 추가\napi.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// 응답 인터셉터 - 401 에러 처리\napi.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    if (error.response?.status === 401) {\n      // 토큰 만료 또는 인증 실패\n      localStorage.removeItem('token');\n      localStorage.removeItem('user');\n      localStorage.removeItem('isAuthenticated');\n      window.location.href = '/login';\n    }\n    return Promise.reject(error);\n  }\n);\n\nexport const authService = {\n  async login(email, password) {\n    try {\n      const response = await api.post('/auth/login', { email, password });\n      if (response.data.token) {\n        // JWT 토큰 저장\n        localStorage.setItem('token', response.data.token);\n        localStorage.setItem('user', JSON.stringify(response.data.user));\n        localStorage.setItem('isAuthenticated', 'true');\n      }\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || { error: error.message };\n    }\n  },\n\n  // client/src/services/authService.js의 register 메서드\n  async register(userData) {\n    try {\n      const response = await api.post('/auth/register', {\n        email: userData.email,\n        username: userData.username,\n        password: userData.password\n      });\n      \n      // 자동 로그인 (선택사항)\n      if (response.data.token) {\n        localStorage.setItem('token', response.data.token);\n        localStorage.setItem('user', JSON.stringify(response.data.user));\n        localStorage.setItem('isAuthenticated', 'true');\n      }\n      \n      return response.data;\n    } catch (error) {\n      throw error.response?.data || { error: error.message };\n    }\n  },\n\n  getCurrentUser() {\n    const userStr = localStorage.getItem('user');\n    return userStr ? JSON.parse(userStr) : null;\n  },\n\n  getToken() {\n    return localStorage.getItem('token');\n  },\n\n  isAuthenticated() {\n    const token = this.getToken();\n    if (!token) return false;\n    \n    try {\n      // JWT 토큰의 페이로드 디코딩하여 만료 확인\n      const payload = JSON.parse(atob(token.split('.')[1]));\n      return payload.exp > Date.now() / 1000;\n    } catch {\n      return false;\n    }\n  },\n\n  logout() {\n    localStorage.removeItem('user');\n    localStorage.removeItem('token');\n    localStorage.removeItem('isAuthenticated');\n  },\n\n  // 토큰 갱신 (선택사항)\n  async refreshToken() {\n    try {\n      const response = await api.post('/auth/refresh');\n      if (response.data.token) {\n        localStorage.setItem('token', response.data.token);\n      }\n      return response.data;\n    } catch (error) {\n      this.logout();\n      throw error;\n    }\n  },\n\n  // 현재 사용자 정보 가져오기 (서버에서)\n  async getCurrentUserFromServer() {\n    try {\n      const response = await api.get('/auth/me');\n      return response.data.user;\n    } catch (error) {\n      throw error.response?.data || { error: error.message };\n    }\n  }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}